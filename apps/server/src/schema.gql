# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""The repo type used in filters."""
enum ArchiveStatusType {
  """Doesn't apply any filter to the query."""
  ALL

  """Only returns the archived repositories."""
  ARCHIVED

  """Only returns the non-archived repositories."""
  NOT_ARCHIVED
}

"""The calendar type."""
enum Calendar {
  """Georgian calendar."""
  Georgian

  """Persian / Jalali calendar."""
  Persian
}

type Collect implements Node {
  collection: Collection!
  id: ID!
  repository: Repository!
}

type CollectConnection {
  """A list of edges"""
  edges: [CollectEdge!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A Collect edge."""
type CollectEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CollectEdge."""
  node: Collect!
}

type Collection implements Node {
  collects(after: String, before: String, first: Int, last: Int): CollectConnection!
  color: Color
  description(locale: Locale = Fa): String
  id: ID!
  image: String
  name: String!
  repositoriesCount: Int!
  slug: String!
}

"""Nice name, isn't it?"""
type CollectionConnection {
  """A list of edges"""
  edges: [CollectionEdge!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A Collection edge."""
type CollectionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CollectionEdge."""
  node: Collection!
}

type Color {
  hexString: String!
  rgba: RGBA!
}

type DateObject {
  difference(calendar: Calendar = Persian, locale: Locale = Fa): String!
  formatted(calendar: Calendar = Persian, format: String = "d MMMM yyyy", locale: Locale = Fa): String!
  original: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""The repo type used in filters."""
enum ForkStatusType {
  """Doesn't apply any filter to the query."""
  ALL

  """Only returns the forked repositories."""
  FORK

  """Only returns the source (not forked) repositories."""
  SOURCE
}

type Language implements Node {
  color: Color
  description: String
  id: ID!
  name: String!
  repositories(after: String, before: String, first: Int, last: Int): RepositoryConnection!
  repositoriesCount: Int!
  slug: String!
}

type LanguageConnection {
  """A list of edges"""
  edges: [LanguageEdge!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A Language edge."""
type LanguageEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of LanguageEdge."""
  node: Language!
}

"""You can order repositories with one of these options."""
enum LanguageOrder {
  """Order by repositories count in descending direction."""
  REPOSITORIES_DESC
}

type License implements Node {
  id: ID!
  key: String!
  name: String!
  repositories(after: String, before: String, first: Int, last: Int): RepositoryConnection!
  repositoriesCount: Int!
  spdxId: String!
}

type LicenseConnection {
  """A list of edges"""
  edges: [LicenseEdge!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A License edge."""
type LicenseEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of LicenseEdge."""
  node: License!
}

"""You can order repositories with one of these options."""
enum LicenseOrder {
  """Order by repositories count in descending direction."""
  REPOSITORIES_DESC
}

"""A locale used for internationalization."""
enum Locale {
  """English"""
  En

  """Farsi/Persian (The default language)"""
  Fa
}

type Metadata {
  totalCollectionsCount: Int!
  totalLanguagesCount: Int!
  totalOwnersCount: Float!
  totalReposCount: Float!
  totalTopicsCount: Int!
}

type Mutation {
  report(id: ID!, reason: String!, subject: ReportableType!): Report!
  reportOwner(id: ID!, reason: String!): Report! @deprecated(reason: "Use `report` for now")
  reportRepository(id: ID!, reason: String!): Report! @deprecated(reason: "Use `report` for now")
  sendSubmission(platform: PlatformType!, username: String!): SubmissionPayload!
}

interface Node {
  id: ID!
}

interface Owner implements Node {
  about: String
  collectedRepositoriesCount: Int!
  id: ID!

  """Owner's most used languages sorted by usage"""
  languages: [OwnerLanguage!]!
  location: String
  login: String!
  name: String
  platform: PlatformType!
  platformId: ID!
  repositories(after: String, before: String, first: Int, last: Int): RepositoryConnection!
  repositoriesCount: Int
  totalStarsCount: Int
  totalStarsRank: Int
  twitterUsername: String
  type: OwnerType!
  websiteUrl: String
}

type OwnerConnection {
  """A list of edges"""
  edges: [OwnerEdge!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A Owner edge."""
type OwnerEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of OwnerEdge."""
  node: Owner!
}

type OwnerLanguage {
  language: Language!

  """
  As `OwnerLanguage` is always retrieved in a context of an owner, the percentage is relative to other used languages from the same owner.
  """
  percentage: Float!
  size: Int!
}

"""You can order repositories with one of these options."""
enum OwnerOrder {
  """
  Order by the number of closed issues in descending order. (applicable only for users)
  """
  CLOSED_ISSUES_COUNT_DESC

  """Order by contributions count in descending order."""
  CONTRIBUTIONS_DESC

  """Order by followers count in descending order."""
  FOLLOWERS_DESC

  """
  Order by the number of open issues in descending order. (applicable only for users)
  """
  OPEN_ISSUES_COUNT_DESC

  """Order by public contributions count in descending order."""
  PUBLIC_CONTRIBUTIONS_DESC

  """
  Order by the number of pull requests in descending order. (applicable only for users)
  """
  PULL_REQUESTS_COUNT_DESC

  """
  Order by the number of repos the user contributed to in descending order. (applicable only for users)
  """
  REPOSITORIES_CONTRIBUTED_TO_COUNT_DESC

  """Order by the number of repos count in descending order."""
  REPOSITORIES_COUNT_DESC

  """Order by the total number of received stars in descending order."""
  TOTAL_STARS_COUNT_DESC
}

type OwnerOrganization implements Node & Owner {
  about: String
  collectedRepositoriesCount: Int!
  id: ID!

  """Owner's most used languages sorted by usage"""
  languages: [OwnerLanguage!]!
  location: String
  login: String!
  members(after: String, before: String, first: Int, last: Int): OwnerUserConnection!
  name: String
  platform: PlatformType!
  platformId: ID!
  repositories(after: String, before: String, first: Int, last: Int): RepositoryConnection!
  repositoriesCount: Int
  totalStarsCount: Int
  totalStarsRank: Int
  twitterUsername: String
  type: OwnerType!
  websiteUrl: String
}

type OwnerOrganizationConnection {
  """A list of edges"""
  edges: [OwnerOrganizationEdge!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A OwnerOrganization edge."""
type OwnerOrganizationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of OwnerOrganizationEdge."""
  node: OwnerOrganization!
}

"""A repository owner could any of these types."""
enum OwnerType {
  """Owner is an organization."""
  Organization

  """Owner is a user."""
  User
}

type OwnerUser implements Node & Owner {
  about: String
  closedIssuesCount: Int
  collectedRepositoriesCount: Int!
  company: String
  contributionsCount: Int
  contributionsRank: Int
  followersCount: Int
  id: ID!

  """Owner's most used languages sorted by usage"""
  languages: [OwnerLanguage!]!
  location: String
  login: String!
  name: String
  openIssuesCount: Int
  organizations(after: String, before: String, first: Int, last: Int): OwnerOrganizationConnection!
  platform: PlatformType!
  platformId: ID!
  publicContributionsCount: Int
  publicContributionsRank: Int
  pullRequestsCount: Int
  repositories(after: String, before: String, first: Int, last: Int): RepositoryConnection!
  repositoriesContributedToCount: Int
  repositoriesContributedToRank: Int
  repositoriesCount: Int
  totalStarsCount: Int
  totalStarsRank: Int
  twitterUsername: String
  type: OwnerType!
  websiteUrl: String
}

type OwnerUserConnection {
  """A list of edges"""
  edges: [OwnerUserEdge!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A OwnerUser edge."""
type OwnerUserEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of OwnerUserEdge."""
  node: OwnerUser!
}

"""Information about pagination in a connection."""
type PageInfo {
  """The cursor of the last edge in the connection."""
  endCursor: String

  """Indicates if there are more pages to fetch."""
  hasNextPage: Boolean!

  """Indicates if there are any pages prior to the current page."""
  hasPreviousPage: Boolean!

  """The cursor of the first edge in the connection."""
  startCursor: String
}

"""A repository owner could any of these types."""
enum PlatformType {
  """https://bitbucket.com"""
  Bitbucket

  """https://github.com"""
  GitHub

  """https://gitlab.com"""
  GitLab
}

type Post implements Node {
  author: User!
  content: String!
  contentHtml: String!
  createdAt: DateObject!
  id: ID!
  image: String
  publishedAt: DateObject
  slug: String!
  summary: String
  summaryLimited: String
  tags: [PostTag!]!
  title: String!
  updatedAt: DateObject!
}

type PostConnection {
  """A list of edges"""
  edges: [PostEdge!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A Post edge."""
type PostEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of PostEdge."""
  node: Post!
}

type PostTag implements Node {
  id: ID!
  name: String!
  posts(after: String, before: String, first: Int, last: Int): PostConnection!
}

type Query {
  collect(id: ID!): Collect!
  collection(slug: String!): Collection
  collectionById(id: ID!): Collection
  collections(after: String, before: String, first: Int, last: Int): CollectionConnection!
  language(slug: String!): Language
  languages(after: String, before: String, first: Int, last: Int, order: LanguageOrder): LanguageConnection!
  licenses(after: String, before: String, first: Int, last: Int, order: LicenseOrder): LicenseConnection!
  metadata: Metadata!
  owner(id: ID!): Owner
  ownerByPlatform(owner: String!, platform: PlatformType!): Owner
  ownerByPlatformId(id: ID!, platform: PlatformType!): Owner
  owners(
    after: String
    before: String
    first: Int
    last: Int
    order: OwnerOrder

    """The platform owner belongs to"""
    platform: PlatformType
    type: OwnerType

    """
    Retrieves only the records that have `followersCount` and `contributionsCount`
    """
    withStatistics: Boolean
  ): OwnerConnection!
  postBySlug(slug: String!): Post
  posts(
    after: String
    before: String
    first: Int
    last: Int

    """Tags"""
    tags: [String!]
  ): PostConnection!
  repositories(
    after: String
    archiveStatus: ArchiveStatusType
    before: String
    first: Int
    forkStatus: ForkStatusType

    """Language slugs"""
    languages: [String!]
    last: Int

    """License keys"""
    licenses: [String!]
    order: RepoOrder
    searchTerm: String
    templateStatus: TemplateStatusType
  ): RepositoryConnection!
  repositoryById(id: ID!): Repository
  repositoryByPlatform(owner: String!, platform: PlatformType!, repo: String!): Repository
  repositoryByPlatformId(id: ID!, platform: PlatformType!): Repository
  tag(name: String!): PostTag
  topic(name: String!): Topic
  topicById(id: ID!): Topic
  topics(after: String, before: String, first: Int, last: Int, order: TopicOrder): TopicConnection!
  userByUsername(username: String!): User
}

type RGBA {
  alpha: Float!
  blue: Int!
  green: Int!
  red: Int!
}

"""You can order repositories with one of these options."""
enum RepoOrder {
  """Order by creation date in ascending direction."""
  CREATED_ASC

  """Order by creation date in descending direction."""
  CREATED_DESC

  """Order by last push's date in ascending direction."""
  PUSHED_ASC

  """Order by last push's date in descending direction."""
  PUSHED_DESC

  """Order by most stars in descending direction."""
  STARS_DESC

  """Order by trendy-ness in monthly scope."""
  TRENDING_MONTHLY

  """Order by trendy-ness in weekly scope."""
  TRENDING_WEEKLY

  """Order by trendy-ness in yearly scope."""
  TRENDING_YEARLY
}

type Report implements Node {
  id: ID!
  reason: String!
  recordUpdatedAt: DateObject!
  reportableType: ReportableType!
}

"""A reportable could any of these types."""
enum ReportableType {
  """Reportable is an owner."""
  Owner

  """Reportable is a repository."""
  Repository
}

type Repository implements Node {
  archived: Boolean!
  createdAt: DateObject!
  defaultBranch: String!
  description: String
  descriptionDirection: ScriptDirection!
  descriptionLimited: String
  disabled: Boolean!
  forksCount: Int!
  fullName: String!
  homePage: String
  id: ID!
  isFork: Boolean!
  isNew: Boolean!
  isTemplate: Boolean!
  language: Language @deprecated(reason: "use `primaryLanguage` instead.")

  """Repository's most used languages sorted by usage"""
  languages: [RepositoryLanguage!]!
  license: License
  name: String!
  openGraphImageUrl: String
  openIssuesCount: Int!
  owner: Owner
  platform: PlatformType!
  platformId: ID!
  platformUrl: String
  primaryLanguage: Language
  pushedAt: DateObject!
  readme: String
  readmeHtml: String
  relatedRepos(after: String, before: String, first: Int, last: Int): RepositoryConnection!
  size: Int!
  stargazersCount: Int!
  topics: [Topic!]!
  updatedAt: DateObject!
  watchersCount: Int!
}

type RepositoryConnection {
  """A list of edges"""
  edges: [RepositoryEdge!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A Repository edge."""
type RepositoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of RepositoryEdge."""
  node: Repository!
}

type RepositoryLanguage {
  language: Language!

  """
  As `RepositoryLanguage` is always retrieved in a context of a repository, the percentage is relative to other languages from the same repository.
  """
  percentage: Float!
  size: Int!
}

"""A repository owner could any of these types."""
enum ScriptDirection {
  """left-to-right"""
  LTR

  """right-to-left"""
  RTL
}

type Submission implements Node {
  id: ID!
  platform: PlatformType!
  username: String!
}

type SubmissionPayload {
  submission: Submission
  userErrors: [UserError!]
}

"""The repo type used in filters."""
enum TemplateStatusType {
  """Doesn't apply any filter to the query."""
  ALL

  """Only returns the non-template repositories."""
  NOT_TEMPLATE

  """Only returns the template repositories."""
  TEMPLATE
}

type Topic implements Node {
  createdAt: DateObject!
  id: ID!
  name: String!
  repositories(after: String, before: String, first: Int, last: Int): RepositoryConnection!
  repositoriesCount: Int!
}

type TopicConnection {
  """A list of edges"""
  edges: [TopicEdge!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A Topic edge."""
type TopicEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of TopicEdge."""
  node: Topic!
}

"""You can order repositories with one of these options."""
enum TopicOrder {
  """Order by repositories count in descending direction."""
  REPOSITORIES_DESC
}

type User implements Node {
  avatar: String
  bio: String
  id: ID!
  name: String
  posts(after: String, before: String, first: Int, last: Int): PostConnection!
  repositories(after: String, before: String, first: Int, last: Int): RepositoryConnection!
  username: String!
}

type UserError {
  message: String!
  path: [String!]
}
