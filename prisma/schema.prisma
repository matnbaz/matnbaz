generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Repository {
  id                    String                @id @default(cuid())
  platform              PlatformType
  platformId            String
  nodeId                String?               @unique
  size                  Int
  stargazersCount       Int
  watchersCount         Int
  forksCount            Int
  openIssuesCount       Int
  openGraphImageUrl     String?
  weeklyTrendIndicator  Float                 @default(1)
  monthlyTrendIndicator Float                 @default(1)
  yearlyTrendIndicator  Float                 @default(1)
  archived              Boolean // TODO: change to isArchived?
  disabled              Boolean // TODO: change to isDisabled?
  isFork                Boolean
  isTemplate            Boolean
  createdAt             DateTime
  updatedAt             DateTime
  pushedAt              DateTime
  extractedAt           DateTime              @default(now()) // recordCreatedAt
  recordUpdatedAt       DateTime              @updatedAt
  latestExtractionAt    DateTime?
  name                  String
  description           String?
  readme                String?
  readmeHtml            String?
  defaultBranch         String
  homePage              String?
  ownerId               String
  languageId            String?
  licenseId             String?
  blockedAt             DateTime?
  Language              Language?             @relation(fields: [languageId], references: [id], onDelete: SetNull)
  License               License?              @relation(fields: [licenseId], references: [id], onDelete: SetNull)
  Owner                 Owner                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  Collects              Collect[]
  CollectionBlacklists  CollectionBlacklist[]
  CollectionWhitelists  CollectionWhitelist[]
  Statistics            RepositoryStatistic[]
  Topics                Topic[]
  Languages             RepositoryLanguage[]

  @@unique([platform, platformId])
}

model RepositoryStatistic {
  id              String     @id @default(cuid())
  createdAt       DateTime   @default(now())
  size            Int
  stargazersCount Int
  watchersCount   Int
  forksCount      Int
  openIssuesCount Int
  repositoryId    String
  Repository      Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
}

model OwnerStatistic {
  id                             String   @id @default(cuid())
  contributionsCount             Int
  publicContributionsCount       Int
  followersCount                 Int
  pullRequestsCount              Int
  openIssuesCount                Int
  closedIssuesCount              Int
  repositoriesContributedToCount Int
  repositoriesCount              Int
  totalStarsCount                Int
  createdAt                      DateTime @default(now())
  ownerId                        String
  Owner                          Owner    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model License {
  id           String       @id @default(cuid())
  key          String       @unique
  name         String
  spdxId       String
  Repositories Repository[]
}

model Topic {
  id                 String       @id @default(cuid())
  name               String       @unique
  createdAt          DateTime     @default(now())
  Repositories       Repository[]
  Collections        Collection[] @relation("topics")
  CollectionExcluded Collection[] @relation("topics_excluded")
}

model Owner {
  id                             String           @id @default(cuid())
  platform                       PlatformType
  platformId                     String
  nodeId                         String?          @unique
  name                           String?
  login                          String
  type                           OwnerType
  reason                         String?
  extractedAt                    DateTime         @default(now()) // TODO: recordCreatedAt
  recordUpdatedAt                DateTime         @updatedAt
  blockedAt                      DateTime?
  latestExtractionAt             DateTime?
  contributionsCount             Int?
  contributionsRank              Int?
  publicContributionsCount       Int?
  publicContributionsRank        Int?
  followersCount                 Int?
  pullRequestsCount              Int?
  openIssuesCount                Int?
  closedIssuesCount              Int?
  repositoriesContributedToCount Int?
  repositoriesContributedToRank  Int?
  repositoriesCount              Int?
  totalStarsCount                Int?
  totalStarsRank                 Int?
  twitterUsername                String?
  websiteUrl                     String?
  company                        String?
  location                       String?
  User                           User?            @relation(fields: [userId], references: [id])
  userId                         String?
  Repositories                   Repository[]
  Collections                    Collection[]     @relation("owners")
  CollectionsExcluded            Collection[]     @relation("owners_excluded")
  Statistics                     OwnerStatistic[]
  Languages                      OwnerLanguage[]

  @@unique([platform, login])
  @@unique([platform, platformId])
}

model RepositoryLanguage {
  id           String     @id @default(cuid())
  size         Int
  Repository   Repository @relation(fields: [repositoryId], references: [id])
  repositoryId String
  Language     Language   @relation(fields: [languageId], references: [id])
  languageId   String
}

model OwnerLanguage {
  id         String   @id @default(cuid())
  size       Int
  Owner      Owner    @relation(fields: [ownerId], references: [id])
  ownerId    String
  Language   Language @relation(fields: [languageId], references: [id])
  languageId String
}

model Submission {
  id         String       @id @default(cuid())
  username   String
  platform   PlatformType
  createdAt  DateTime     @default(now())
  repeatedAt DateTime     @updatedAt

  @@unique([platform, username])
}

model Report {
  id              String         @id @default(cuid())
  reason          String
  reportableId    String
  reportableType  ReportableType
  hasBeenResolved Boolean        @default(false)
  createdAt       DateTime       @default(now())
}

model Language {
  id                  String               @id @default(cuid())
  name                String
  slug                String               @unique
  description         String?
  Repositories        Repository[]
  Collections         Collection[]         @relation("collections")
  CollectionsExcluded Collection[]         @relation("collections_excluded")
  RepositoryLanguages RepositoryLanguage[]
  OwnerLanguages      OwnerLanguage[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  name      String?
  bio       String?
  avatar    String?
  password  String
  type      UserType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Posts     Post[]
  Owners    Owner[]
}

model Collection {
  id                      String                @id @default(cuid())
  name                    String
  slug                    String                @unique
  Description             TranslatedField?      @relation(fields: [translatedDescriptionId], references: [id])
  translatedDescriptionId String?
  color                   String?
  image                   String?
  terms                   String[]
  termsExcluded           String[]
  readmeTerms             String[]
  readmeTermsExcluded     String[]
  minStargazers           Int?
  minForks                Int?
  archived                Boolean?
  template                Boolean?
  minCreatedAt            DateTime?
  maxCreatedAt            DateTime?
  minPushedAt             DateTime?
  maxPushedAt             DateTime?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  Collects                Collect[]
  Blacklist               CollectionBlacklist[]
  Whitelist               CollectionWhitelist[]
  Languages               Language[]            @relation("collections")
  LanguagesExcluded       Language[]            @relation("collections_excluded")
  Owners                  Owner[]               @relation("owners")
  OwnersExcluded          Owner[]               @relation("owners_excluded")
  Topics                  Topic[]               @relation("topics")
  TopicsExcluded          Topic[]               @relation("topics_excluded")
}

model CollectionBlacklist {
  id           String     @id @default(cuid())
  collectionId String
  repositoryId String
  createdAt    DateTime   @default(now())
  Collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  Repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@unique([collectionId, repositoryId])
}

model CollectionWhitelist {
  id           String     @id @default(cuid())
  collectionId String
  repositoryId String
  createdAt    DateTime   @default(now())
  Collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  Repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@unique([collectionId, repositoryId])
}

model Collect {
  id           String     @id @default(cuid())
  collectionId String
  repositoryId String
  createdAt    DateTime   @default(now())
  Collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  Repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
}

model Post {
  id          String    @id @default(cuid())
  image       String?
  summary     String?
  title       String
  slug        String    @unique
  content     String
  contentHtml String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  User        User      @relation(fields: [userId], references: [id])
  userId      String
  Tags        PostTag[]
}

model PostTag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  Posts     Post[]
}

model TranslatedField {
  id         String       @id @default(cuid())
  fa         String
  en         String
  Collection Collection[]
}

enum OwnerType {
  User
  Organization
}

enum PlatformType {
  GitHub
  GitLab
  Bitbucket
}

enum ReportableType {
  Owner
  Repository
}

enum UserType {
  User
  Moderator
  Admin
}
